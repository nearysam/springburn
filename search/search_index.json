{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to springburn","text":"<p>A python package for geospatial analysis in GEOG 422</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://nearysam.github.io/springburn</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#springburn.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>springburn/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/nearysam/springburn/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>springburn could always use more documentation, whether as part of the official springburn docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/nearysam/springburn/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up springburn for local development.</p> <ol> <li> <p>Fork the springburn repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/springburn.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv springburn\n$ cd springburn/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 springburn tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/nearysam/springburn/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install springburn, run this command in your terminal:</p> <pre><code>pip install springburn\n</code></pre> <p>This is the preferred method to install springburn, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install springburn from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/nearysam/springburn\n</code></pre>"},{"location":"springburn/","title":"springburn module","text":"<p>Main module.</p>"},{"location":"usage/","title":"Usage","text":"<p>To use springburn in a project:</p> <pre><code>import springburn\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!')"},{"location":"examples/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-03-01 22:16:34.072545\n</pre> In\u00a0[2]: Copied! <pre>name_john = \"John\"\nmessage_john = \"Hello\" + \" \" + (name_john) + \",\" +\" would you like to learn Python today?\"\nprint(message_john)\n</pre> name_john = \"John\" message_john = \"Hello\" + \" \" + (name_john) + \",\" +\" would you like to learn Python today?\" print(message_john) <pre>Hello John, would you like to learn Python today?\n</pre> In\u00a0[3]: Copied! <pre>name_sam = \"Sam\"\nprint(name_sam.lower())\nprint(name_sam.upper())\nprint(name_sam.title())\n</pre> name_sam = \"Sam\" print(name_sam.lower()) print(name_sam.upper()) print(name_sam.title()) <pre>sam\nSAM\nSam\n</pre> In\u00a0[4]: Copied! <pre>quote_marx = \"Karl Marx once said, 'We have a world to win!'\"\nprint(quote_marx)\n</pre> quote_marx = \"Karl Marx once said, 'We have a world to win!'\" print(quote_marx) <pre>Karl Marx once said, 'We have a world to win!'\n</pre> In\u00a0[5]: Copied! <pre>name_alden = \"    alden    \"\nprint(\"\\t\" + name_alden + \"\\n\")\nprint(name_alden.lstrip() + name_alden.strip() + name_alden.rstrip())\n</pre> name_alden = \"    alden    \" print(\"\\t\" + name_alden + \"\\n\") print(name_alden.lstrip() + name_alden.strip() + name_alden.rstrip()) <pre>\t    alden    \n\nalden    alden    alden\n</pre> In\u00a0[6]: Copied! <pre>names_friends = [\"John\" , \"Bill\" , \"Mark\" , \"Jess\"]\nprint(names_friends[0])\nprint(names_friends[1])\nprint(names_friends[2])\nprint(names_friends[3])\n</pre> names_friends = [\"John\" , \"Bill\" , \"Mark\" , \"Jess\"] print(names_friends[0]) print(names_friends[1]) print(names_friends[2]) print(names_friends[3]) <pre>John\nBill\nMark\nJess\n</pre> In\u00a0[7]: Copied! <pre>fav_transit = [\"truck\" , \"train\" , \"plane\"]\nfav_type = [\"Toyota\", \"bullet\", \"jet\"]\nprint(f\"I would like to buy a \"  + fav_type[0] + fav_transit[0] + \".\")\nprint(f\"The \" + fav_type[1]+ \" \" + fav_transit[1] + \" is really fast.\")\nprint(f\"The \" + fav_type[2] + \" \" + fav_transit[2] + \" is really cool!\")\n</pre> fav_transit = [\"truck\" , \"train\" , \"plane\"] fav_type = [\"Toyota\", \"bullet\", \"jet\"] print(f\"I would like to buy a \"  + fav_type[0] + fav_transit[0] + \".\") print(f\"The \" + fav_type[1]+ \" \" + fav_transit[1] + \" is really fast.\") print(f\"The \" + fav_type[2] + \" \" + fav_transit[2] + \" is really cool!\") <pre>I would like to buy a Toyotatruck.\nThe bullet train is really fast.\nThe jet plane is really cool!\n</pre> In\u00a0[8]: Copied! <pre>fav_pizza = [\"pepperoni\", \"cheese\", \"olive\"]\nfor fav_pizza in fav_pizza:\n    print(\"I like \" + fav_pizza + \" pizza.\")\n</pre> fav_pizza = [\"pepperoni\", \"cheese\", \"olive\"] for fav_pizza in fav_pizza:     print(\"I like \" + fav_pizza + \" pizza.\") <pre>I like pepperoni pizza.\nI like cheese pizza.\nI like olive pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>fav_pizza = [\"pepperoni\", \"cheese\", \"olive\"]\nfor fav_pizza in fav_pizza:\n    print(\"I like \" + fav_pizza + \" pizza.\")\npizz_message = \"I really love pizza!\"\nprint(pizz_message)\n</pre> fav_pizza = [\"pepperoni\", \"cheese\", \"olive\"] for fav_pizza in fav_pizza:     print(\"I like \" + fav_pizza + \" pizza.\") pizz_message = \"I really love pizza!\" print(pizz_message) <pre>I like pepperoni pizza.\nI like cheese pizza.\nI like olive pizza.\nI really love pizza!\n</pre> In\u00a0[10]: Copied! <pre>pet_animals = [\"dog\", \"cat\", \"ferret\"]\nfor pet_animals in pet_animals:\n    print(f\"A {pet_animals} would make a great pet.\")\n</pre> pet_animals = [\"dog\", \"cat\", \"ferret\"] for pet_animals in pet_animals:     print(f\"A {pet_animals} would make a great pet.\") <pre>A dog would make a great pet.\nA cat would make a great pet.\nA ferret would make a great pet.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>pet_animals = [\"dog\", \"cat\", \"ferret\"]\nfor pet_animals in pet_animals:\n    print(f\"A {pet_animals} would make a great pet.\")\nmessage_pets = \"All of these pets have fur!\"\nprint(message_pets)\n</pre> pet_animals = [\"dog\", \"cat\", \"ferret\"] for pet_animals in pet_animals:     print(f\"A {pet_animals} would make a great pet.\") message_pets = \"All of these pets have fur!\" print(message_pets) <pre>A dog would make a great pet.\nA cat would make a great pet.\nA ferret would make a great pet.\nAll of these pets have fur!\n</pre> In\u00a0[12]: Copied! <pre>numbers = range(1,101)\nnumbers_list = list(numbers)\nprint(numbers_list)\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</pre> numbers = range(1,101) numbers_list = list(numbers) print(numbers_list) print(min(numbers)) print(max(numbers)) print(sum(numbers)) <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n1\n100\n5050\n</pre> In\u00a0[13]: Copied! <pre>odd_numbers = range(1,20,2)\nlist_odd = list(odd_numbers)\nfor list_odd in list_odd:\n    print(list_odd)\n</pre> odd_numbers = range(1,20,2) list_odd = list(odd_numbers) for list_odd in list_odd:     print(list_odd) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>mult_three = range(3,31,3)\nlist_mult = list(mult_three)\nfor list_mult in list_mult:\n    print(list_mult)\n</pre> mult_three = range(3,31,3) list_mult = list(mult_three) for list_mult in list_mult:     print(list_mult) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cube_list = [x **3 for x in range(10)]\nprint(cube_list)\n</pre> cube_list = [x **3 for x in range(10)] print(cube_list) <pre>[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n</pre> In\u00a0[16]: Copied! <pre>numbers = range(1,101)\nfirst_three = numbers[:3]\nfirst_three_list = list(first_three)\nprint(first_three_list)\n</pre> numbers = range(1,101) first_three = numbers[:3] first_three_list = list(first_three) print(first_three_list) <pre>[1, 2, 3]\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>numbers = range(1,101)\ntotal_items = len(numbers)\nstart_index = (total_items - 3)//2\nend_index = start_index + 3\nmiddle_three = numbers[start_index:end_index]\nmiddle_three_list = list(middle_three)\nprint(middle_three_list)\n</pre> numbers = range(1,101) total_items = len(numbers) start_index = (total_items - 3)//2 end_index = start_index + 3 middle_three = numbers[start_index:end_index] middle_three_list = list(middle_three) print(middle_three_list) <pre>[49, 50, 51]\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>numbers = range(1,101)\nlast_three = numbers[-3:]\nlast_three_list = list(last_three)\nprint(last_three_list)\n</pre> numbers = range(1,101) last_three = numbers[-3:] last_three_list = list(last_three) print(last_three_list) <pre>[98, 99, 100]\n</pre> In\u00a0[19]: Copied! <pre>buffet_items = (\"pasta\", \"steak\", \"beans\", \"rice\", \"cake\")\nfor buffet_items in buffet_items:\n    print(buffet_items)\n</pre> buffet_items = (\"pasta\", \"steak\", \"beans\", \"rice\", \"cake\") for buffet_items in buffet_items:     print(buffet_items) <pre>pasta\nsteak\nbeans\nrice\ncake\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>buffet_items = (\"pasta\", \"steak\", \"beans\", \"rice\", \"cake\")\nnew_buffet = (buffet_items[0],buffet_items[1],buffet_items[2], \"chicken\", \"bread\")\nfor new_buffet in new_buffet:\n    print(new_buffet)\n</pre> buffet_items = (\"pasta\", \"steak\", \"beans\", \"rice\", \"cake\") new_buffet = (buffet_items[0],buffet_items[1],buffet_items[2], \"chicken\", \"bread\") for new_buffet in new_buffet:     print(new_buffet) <pre>pasta\nsteak\nbeans\nchicken\nbread\n</pre> In\u00a0[21]: Copied! <pre>alien_color = \"green\"\nif alien_color == \"green\":\n    print(f\"plus 5 points\")\nalien_color = \"red\"\nif alien_color == \"green\":\n    print(f\"plus 5 points\")\n</pre> alien_color = \"green\" if alien_color == \"green\":     print(f\"plus 5 points\") alien_color = \"red\" if alien_color == \"green\":     print(f\"plus 5 points\") <pre>plus 5 points\n</pre> In\u00a0[22]: Copied! <pre>age = 66\nif age&lt;2:\n    print(\"You are a baby.\")\nelif age&lt;4:\n    print(\"You are a toddler.\")\nelif age&lt;13:\n    print(\"You are a kid.\")\nelif age&lt;20:\n    print(\"You are a teen.\")\nelif age&lt;65:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are old!\")\n</pre> age = 66 if age&lt;2:     print(\"You are a baby.\") elif age&lt;4:     print(\"You are a toddler.\") elif age&lt;13:     print(\"You are a kid.\") elif age&lt;20:     print(\"You are a teen.\") elif age&lt;65:     print(\"You are an adult.\") else:     print(\"You are old!\") <pre>You are old!\n</pre> In\u00a0[23]: Copied! <pre>fav_fruits = [\"banana\", \"apple\", \"plum\"]\nif \"banana\" in fav_fruits:\n    print(\"You really like bananas!\")\nif \"apple\" in fav_fruits:\n    print(\"You really like apples!\")\nif \"plum\" in fav_fruits:\n    print(\"You really like plums!\")\nif \"orange\" in fav_fruits:\n    print(\"You really like oranges\")\nif \"watermelon\" in fav_fruits:\n    print(\"You really like watermelons!\")\n</pre> fav_fruits = [\"banana\", \"apple\", \"plum\"] if \"banana\" in fav_fruits:     print(\"You really like bananas!\") if \"apple\" in fav_fruits:     print(\"You really like apples!\") if \"plum\" in fav_fruits:     print(\"You really like plums!\") if \"orange\" in fav_fruits:     print(\"You really like oranges\") if \"watermelon\" in fav_fruits:     print(\"You really like watermelons!\") <pre>You really like bananas!\nYou really like apples!\nYou really like plums!\n</pre> In\u00a0[24]: Copied! <pre>usernames = \"admin\"\nusername_list = [\"admin\", \"rob1\", \"sam2\", \"james3\", \"jane4\"]\nfor username_list in usernames:\n    if usernames == \"admin\":\n        print(\"Hello admin, would you like a status report?\")\n        break\n    elif usernames == \"rob1\":\n        print(\"Hello rob1, thank you for logging in today!\")\n        break\n    elif usernames == \"sam2\":\n        print(\"Hello sam2, thank you for logging in today!\")\n        break\n    elif usernames == \"james3\":\n        print(\"Hello james3, thank you for logging in today!\")\n        break\n    elif usernames == \"jane4\":\n        print(\"Hello jane4, thank you for logging in today!\")\n        break\n    else:\n        print(\"Invalid user login\")\n        break\n</pre> usernames = \"admin\" username_list = [\"admin\", \"rob1\", \"sam2\", \"james3\", \"jane4\"] for username_list in usernames:     if usernames == \"admin\":         print(\"Hello admin, would you like a status report?\")         break     elif usernames == \"rob1\":         print(\"Hello rob1, thank you for logging in today!\")         break     elif usernames == \"sam2\":         print(\"Hello sam2, thank you for logging in today!\")         break     elif usernames == \"james3\":         print(\"Hello james3, thank you for logging in today!\")         break     elif usernames == \"jane4\":         print(\"Hello jane4, thank you for logging in today!\")         break     else:         print(\"Invalid user login\")         break <pre>Hello admin, would you like a status report?\n</pre> In\u00a0[25]: Copied! <pre>current_users = [\"John2\", \"sally3\", \"Rick4\", \"Dan5\", \"Jim6\"]\nnew_users = [\"John2\", \"SALLY3\", \"Don4\", \"Hans5\", \"Pam6\"]\ncurrent_users_lower = [user.lower() for user in current_users]\nfor new_user in new_users:\n    if new_user in current_users:\n        print(f\"The username '{new_user}'is unavailable.\")\n    elif new_user.lower() in current_users_lower:\n        print(f\"The username '{new_user}' is unavailable.\")\n    else:\n        print(f\"The username '{new_user}' is available.\")\n</pre> current_users = [\"John2\", \"sally3\", \"Rick4\", \"Dan5\", \"Jim6\"] new_users = [\"John2\", \"SALLY3\", \"Don4\", \"Hans5\", \"Pam6\"] current_users_lower = [user.lower() for user in current_users] for new_user in new_users:     if new_user in current_users:         print(f\"The username '{new_user}'is unavailable.\")     elif new_user.lower() in current_users_lower:         print(f\"The username '{new_user}' is unavailable.\")     else:         print(f\"The username '{new_user}' is available.\") <pre>The username 'John2'is unavailable.\nThe username 'SALLY3' is unavailable.\nThe username 'Don4' is available.\nThe username 'Hans5' is available.\nThe username 'Pam6' is available.\n</pre> In\u00a0[26]: Copied! <pre>ordinal_numbers = list(range(1,10))\nfor ordinal_number in ordinal_numbers:\n    if ordinal_number == 1:\n        print(f\"{ordinal_number}st\")\n    elif ordinal_number == 2:\n        print(f\"{ordinal_number}nd\")\n    elif ordinal_number == 3:\n        print(f\"{ordinal_number}rd\")\n    else:\n        print(f\"{ordinal_number}th\")\n</pre> ordinal_numbers = list(range(1,10)) for ordinal_number in ordinal_numbers:     if ordinal_number == 1:         print(f\"{ordinal_number}st\")     elif ordinal_number == 2:         print(f\"{ordinal_number}nd\")     elif ordinal_number == 3:         print(f\"{ordinal_number}rd\")     else:         print(f\"{ordinal_number}th\") <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"examples/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"examples/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/lab5/","title":"Lab5","text":"In\u00a0[1]: Copied! <pre>person_1 = {\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Doe\",\n    \"age\": 24,\n    \"city\": \"Knoxville\",\n}\nprint(\"First Name:\", person_1[\"first_name\"])\nprint(\"Last Name:\", person_1[\"last_name\"])\nprint(\"Age:\", person_1[\"age\"])\nprint(\"City:\", person_1[\"city\"])\n</pre> person_1 = {     \"first_name\": \"Jane\",     \"last_name\": \"Doe\",     \"age\": 24,     \"city\": \"Knoxville\", } print(\"First Name:\", person_1[\"first_name\"]) print(\"Last Name:\", person_1[\"last_name\"]) print(\"Age:\", person_1[\"age\"]) print(\"City:\", person_1[\"city\"]) <pre>First Name: Jane\nLast Name: Doe\nAge: 24\nCity: Knoxville\n</pre> In\u00a0[2]: Copied! <pre>fav_numbers = {\n    \"James\": 8,\n    \"Lena\": 1,\n    \"Bill\": 43,\n    \"Will\": 12\n}\nprint(\"James's favorite number is: \", fav_numbers[\"James\"])\nprint(\"Lena's favorite number is: \", fav_numbers[\"Lena\"])\nprint(\"Bill's favorite number is: \", fav_numbers[\"Bill\"])\nprint(\"Will's favorite number is: \", fav_numbers[\"Will\"])\n</pre> fav_numbers = {     \"James\": 8,     \"Lena\": 1,     \"Bill\": 43,     \"Will\": 12 } print(\"James's favorite number is: \", fav_numbers[\"James\"]) print(\"Lena's favorite number is: \", fav_numbers[\"Lena\"]) print(\"Bill's favorite number is: \", fav_numbers[\"Bill\"]) print(\"Will's favorite number is: \", fav_numbers[\"Will\"]) <pre>James's favorite number is:  8\nLena's favorite number is:  1\nBill's favorite number is:  43\nWill's favorite number is:  12\n</pre> In\u00a0[3]: Copied! <pre>py_commands = {\n    \"print\": \"Prints out variable to output.\",\n    \"range\": \"Generates sequential numbers within range that is stated.\",\n    \"list\": \"Creates a list object, or a collection of ordered and changeable items.\",\n}\nprint(\"Definition of 'print' command:\", py_commands[\"print\"])\nprint(\"Definition of 'range' command:\", py_commands[\"range\"])\nprint(\"Definition of 'list' command:\", py_commands[\"list\"])\n</pre> py_commands = {     \"print\": \"Prints out variable to output.\",     \"range\": \"Generates sequential numbers within range that is stated.\",     \"list\": \"Creates a list object, or a collection of ordered and changeable items.\", } print(\"Definition of 'print' command:\", py_commands[\"print\"]) print(\"Definition of 'range' command:\", py_commands[\"range\"]) print(\"Definition of 'list' command:\", py_commands[\"list\"]) <pre>Definition of 'print' command: Prints out variable to output.\nDefinition of 'range' command: Generates sequential numbers within range that is stated.\nDefinition of 'list' command: Creates a list object, or a collection of ordered and changeable items.\n</pre> In\u00a0[4]: Copied! <pre>py_commands = {\n    \"print\": \"Prints out variable to output.\",\n    \"range\": \"Generates sequential numbers within range that is stated.\",\n    \"list\": \"Creates a list object, or a collection of ordered and changeable items.\",\n    \"len\": \"Returns length of an object.\",\n    \"sort\": \"Sorts a list in ascending order.\",\n    \"def\": \"Used to define a function.\",\n    \"class\": \"Template for creating objects.\",\n    \"elif\": \"Else if statement to check conditions.\"\n}\nfor command, definition in py_commands.items():\n    print(f\"Definition of '{command}':\", definition)\n</pre> py_commands = {     \"print\": \"Prints out variable to output.\",     \"range\": \"Generates sequential numbers within range that is stated.\",     \"list\": \"Creates a list object, or a collection of ordered and changeable items.\",     \"len\": \"Returns length of an object.\",     \"sort\": \"Sorts a list in ascending order.\",     \"def\": \"Used to define a function.\",     \"class\": \"Template for creating objects.\",     \"elif\": \"Else if statement to check conditions.\" } for command, definition in py_commands.items():     print(f\"Definition of '{command}':\", definition) <pre>Definition of 'print': Prints out variable to output.\nDefinition of 'range': Generates sequential numbers within range that is stated.\nDefinition of 'list': Creates a list object, or a collection of ordered and changeable items.\nDefinition of 'len': Returns length of an object.\nDefinition of 'sort': Sorts a list in ascending order.\nDefinition of 'def': Used to define a function.\nDefinition of 'class': Template for creating objects.\nDefinition of 'elif': Else if statement to check conditions.\n</pre> In\u00a0[5]: Copied! <pre>country_rivers = {\n    \"USA\": \"Mississippi\",\n    \"England\": \"Thames\",\n    \"Brazil\": \"Amazon\"\n}\nfor country, river in country_rivers.items():\n    print(f\"The {river} runs through {country}.\")\nfor river in country_rivers.keys():\n    print(river)\nfor country in country_rivers.values():\n    print(country)\n</pre> country_rivers = {     \"USA\": \"Mississippi\",     \"England\": \"Thames\",     \"Brazil\": \"Amazon\" } for country, river in country_rivers.items():     print(f\"The {river} runs through {country}.\") for river in country_rivers.keys():     print(river) for country in country_rivers.values():     print(country) <pre>The Mississippi runs through USA.\nThe Thames runs through England.\nThe Amazon runs through Brazil.\nUSA\nEngland\nBrazil\nMississippi\nThames\nAmazon\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    \"Lagos\": {\n        \"Country\": \"Nigeria\",\n        \"Population\": \"15 Million\",\n        \"Fun Fact\": \"Lagos means 'lakes' in Portuguese.\"\n    },\n    \"New York\": {\n        \"Country\": \"USA\",\n        \"Population\": \"8 Million\",\n        \"Fun Fact\": \"New York is has more nationalities per block than any other city in the world.\"\n    },\n    \"New Delhi\": {\n        \"Country\": \"India\",\n        \"Population\": \"33 Million\",\n        \"Fun Fact\": \"New Delhi is the capital of India.\"\n    }\n}\nfor city, info in cities.items():\n    print(f\"City: {city}\")\n    print(f\"Country: {info['Country']}\")\n    print(f\"Population: {info['Population']}\")\n    print(f\"Fun Fact: {info['Fun Fact']}\")\n    print()\n</pre> cities = {     \"Lagos\": {         \"Country\": \"Nigeria\",         \"Population\": \"15 Million\",         \"Fun Fact\": \"Lagos means 'lakes' in Portuguese.\"     },     \"New York\": {         \"Country\": \"USA\",         \"Population\": \"8 Million\",         \"Fun Fact\": \"New York is has more nationalities per block than any other city in the world.\"     },     \"New Delhi\": {         \"Country\": \"India\",         \"Population\": \"33 Million\",         \"Fun Fact\": \"New Delhi is the capital of India.\"     } } for city, info in cities.items():     print(f\"City: {city}\")     print(f\"Country: {info['Country']}\")     print(f\"Population: {info['Population']}\")     print(f\"Fun Fact: {info['Fun Fact']}\")     print() <pre>City: Lagos\nCountry: Nigeria\nPopulation: 15 Million\nFun Fact: Lagos means 'lakes' in Portuguese.\n\nCity: New York\nCountry: USA\nPopulation: 8 Million\nFun Fact: New York is has more nationalities per block than any other city in the world.\n\nCity: New Delhi\nCountry: India\nPopulation: 33 Million\nFun Fact: New Delhi is the capital of India.\n\n</pre> In\u00a0[7]: Copied! <pre>car_pref = input(\"What type of car do you like? \")\n\nprint(f\"Let me look for any {car_pref}'s we may have.\")\n</pre> car_pref = input(\"What type of car do you like? \")  print(f\"Let me look for any {car_pref}'s we may have.\") <pre>Let me look for any Honda's we may have.\n</pre> In\u00a0[8]: Copied! <pre>people = int(input(\"How many in your group?\"))\nif people &gt; 8:\n    print(\"You'll have to wait a sec for a table to be available.\")\nelse:\n    print(\"Your table is ready!\")\n</pre> people = int(input(\"How many in your group?\")) if people &gt; 8:     print(\"You'll have to wait a sec for a table to be available.\") else:     print(\"Your table is ready!\") <pre>You'll have to wait a sec for a table to be available.\n</pre> In\u00a0[9]: Copied! <pre>user_number = int(input(\"Please enter a number:\"))\nif user_number % 10 == 0:\n    print(f\"{user_number} is a multiple of 10.\")\nelse:\n    print(f\"{user_number} is not a multiple of 10.\")\n</pre> user_number = int(input(\"Please enter a number:\")) if user_number % 10 == 0:     print(f\"{user_number} is a multiple of 10.\") else:     print(f\"{user_number} is not a multiple of 10.\") <pre>4 is not a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>toppings = []\nwhile True:\n    topping = input(\"Enter a topping (or 'q' to finish order): \")\n    if topping.lower() == 'q':\n        break\n    toppings.append(topping)\n    print(f\"Adding {topping} to your pizza!\")\nprint(\"Your pizza with the following toppings is ready:\")\nfor topping in toppings:\n    print(\"-\", topping)\n</pre> toppings = [] while True:     topping = input(\"Enter a topping (or 'q' to finish order): \")     if topping.lower() == 'q':         break     toppings.append(topping)     print(f\"Adding {topping} to your pizza!\") print(\"Your pizza with the following toppings is ready:\") for topping in toppings:     print(\"-\", topping) <pre>Adding pepperoni to your pizza!\nAdding olives to your pizza!\nAdding anchovies to your pizza!\nYour pizza with the following toppings is ready:\n- pepperoni\n- olives\n- anchovies\n</pre> In\u00a0[11]: Copied! <pre>def display_message():\n    '''Prints sentence telling everyone what I am learning in this chapter'''\n    print(\"In this chapter we are learning python basics.\")\ndisplay_message()\n</pre> def display_message():     '''Prints sentence telling everyone what I am learning in this chapter'''     print(\"In this chapter we are learning python basics.\") display_message() <pre>In this chapter we are learning python basics.\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n    \"\"\"Prints message of favorite book title.\"\"\"\n    print(f\"One of my favorite books is {title}.\")\nfavorite_book(\"Blood Meridian\")\n</pre> def favorite_book(title):     \"\"\"Prints message of favorite book title.\"\"\"     print(f\"One of my favorite books is {title}.\") favorite_book(\"Blood Meridian\") <pre>One of my favorite books is Blood Meridian.\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    \"\"\"Prints a sentence summarizing size of the shirt message printed on it.\"\"\"\n    print(f\"A {size}-sized shirt printed with the message: '{message}'.\")\n\n\nmake_shirt(\"medium\", \"Awesome!\")\n\nmake_shirt(size=\"small\", message=\"Hello World!\")\n</pre> def make_shirt(size, message):     \"\"\"Prints a sentence summarizing size of the shirt message printed on it.\"\"\"     print(f\"A {size}-sized shirt printed with the message: '{message}'.\")   make_shirt(\"medium\", \"Awesome!\")  make_shirt(size=\"small\", message=\"Hello World!\") <pre>A medium-sized shirt printed with the message: 'Awesome!'.\nA small-sized shirt printed with the message: 'Hello World!'.\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size=\"large\", message=\"I love Python\"):\n    \"\"\"Prints a sentence summarizing the size of shirt and message printed on it.\"\"\"\n    print(f\"A {size}-sized shirt printed with the message: '{message}'.\")\n\nmake_shirt()\n\nmake_shirt(size=\"medium\")\n\nmake_shirt(size=\"small\", message=\"Seize the Day!\")\n</pre> def make_shirt(size=\"large\", message=\"I love Python\"):     \"\"\"Prints a sentence summarizing the size of shirt and message printed on it.\"\"\"     print(f\"A {size}-sized shirt printed with the message: '{message}'.\")  make_shirt()  make_shirt(size=\"medium\")  make_shirt(size=\"small\", message=\"Seize the Day!\") <pre>A large-sized shirt printed with the message: 'I love Python'.\nA medium-sized shirt printed with the message: 'I love Python'.\nA small-sized shirt printed with the message: 'Seize the Day!'.\n</pre> In\u00a0[15]: Copied! <pre>def describe_city(city, country=\"Unstated\"):\n    \"\"\"Prints sentence describing the city and its country.\"\"\"\n    print(f\"{city} is in {country}.\")\n\ndescribe_city(\"London\", \"England\")\ndescribe_city(\"New York\", \"USA\")\ndescribe_city(\"Lagos\", \"Nigeria\")\n</pre> def describe_city(city, country=\"Unstated\"):     \"\"\"Prints sentence describing the city and its country.\"\"\"     print(f\"{city} is in {country}.\")  describe_city(\"London\", \"England\") describe_city(\"New York\", \"USA\") describe_city(\"Lagos\", \"Nigeria\") <pre>London is in England.\nNew York is in USA.\nLagos is in Nigeria.\n</pre> In\u00a0[16]: Copied! <pre>def city_country(city, country):\n    \"\"\"Returns string formatted 'city, country'.\"\"\"\n    return f\"{city}, {country}\"\n\nprint(city_country(\"Santiago\", \"Chile\"))\nprint(city_country(\"New York\", \"USA\"))\nprint(city_country(\"Lagos\", \"Nigeria\"))\n</pre> def city_country(city, country):     \"\"\"Returns string formatted 'city, country'.\"\"\"     return f\"{city}, {country}\"  print(city_country(\"Santiago\", \"Chile\")) print(city_country(\"New York\", \"USA\")) print(city_country(\"Lagos\", \"Nigeria\")) <pre>Santiago, Chile\nNew York, USA\nLagos, Nigeria\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist, title, songs=None):\n    \"\"\"Creates dictionary describing a music album.\"\"\"\n    album = {\"artist\": artist, \"title\": title}\n    if songs:\n        album[\"songs\"] = songs\n    return album\n\nalbum1 = make_album(\"Nirvana\", \"Never mind\")\nprint(album1)\n\nalbum2 = make_album(\"Beatles\", \"Abbey Road\", 10)\nprint(album2)\n\nalbum3 = make_album(\"Miles Davis\", \"Bitches Brew\", 6)\nprint(album3)\n</pre> def make_album(artist, title, songs=None):     \"\"\"Creates dictionary describing a music album.\"\"\"     album = {\"artist\": artist, \"title\": title}     if songs:         album[\"songs\"] = songs     return album  album1 = make_album(\"Nirvana\", \"Never mind\") print(album1)  album2 = make_album(\"Beatles\", \"Abbey Road\", 10) print(album2)  album3 = make_album(\"Miles Davis\", \"Bitches Brew\", 6) print(album3) <pre>{'artist': 'Nirvana', 'title': 'Never mind'}\n{'artist': 'Beatles', 'title': 'Abbey Road', 'songs': 10}\n{'artist': 'Miles Davis', 'title': 'Bitches Brew', 'songs': 6}\n</pre> In\u00a0[18]: Copied! <pre>def make_album(artist, title, songs=None):\n    \"\"\"Builds a dictionary describing a music album.\"\"\"\n    album = {\"artist\": artist, \"title\": title}\n    if songs:\n        album[\"songs\"] = songs\n    return album\n\nwhile True:\n    artist = input(\"Enter the artist's name (or 'q' to exit): \")\n    if artist.lower() == 'q':\n        break\n\n    title = input(\"Enter the album title: \")\n    if title.lower() == 'q':\n        break\n\n    album_info = make_album(artist, title)\n    print(album_info)\n</pre> def make_album(artist, title, songs=None):     \"\"\"Builds a dictionary describing a music album.\"\"\"     album = {\"artist\": artist, \"title\": title}     if songs:         album[\"songs\"] = songs     return album  while True:     artist = input(\"Enter the artist's name (or 'q' to exit): \")     if artist.lower() == 'q':         break      title = input(\"Enter the album title: \")     if title.lower() == 'q':         break      album_info = make_album(artist, title)     print(album_info) <pre>{'artist': 'nirvana', 'title': 'never mind'}\n{'artist': 'beatles', 'title': 'abbey road'}\n{'artist': 'miles davis', 'title': 'bitches brew'}\n</pre> In\u00a0[19]: Copied! <pre>def show_messages(messages):\n    \"\"\"Prints each text message from the list.\"\"\"\n    for message in messages:\n        print(message)\n\nmessages = [\n    \"Hello, what's up?\",\n    \"Hope you are doing well.\",\n    \"How is the weather today?\",\n]\n\nshow_messages(messages)\n</pre> def show_messages(messages):     \"\"\"Prints each text message from the list.\"\"\"     for message in messages:         print(message)  messages = [     \"Hello, what's up?\",     \"Hope you are doing well.\",     \"How is the weather today?\", ]  show_messages(messages) <pre>Hello, what's up?\nHope you are doing well.\nHow is the weather today?\n</pre> In\u00a0[20]: Copied! <pre>def send_messages(messages, sent_messages):\n    \"\"\"Prints each text message and moves it to a new list.\"\"\"\n    while messages:\n        message = messages.pop(0)\n        print(message)\n        sent_messages.append(message)\n\nmessages = [\n    \"Hello, what's up?\",\n    \"Remember the test.\",\n    \"Don't forget about tomorrow.\",\n    \"Have a great day!\"\n]\n\nsent_messages = []\n\nsend_messages(messages, sent_messages)\n\nprint(\"\\nOriginal Messages:\")\nfor message in messages:\n    print(message)\n\nprint(\"\\nSent Messages:\")\nfor message in sent_messages:\n    print(message)\n</pre> def send_messages(messages, sent_messages):     \"\"\"Prints each text message and moves it to a new list.\"\"\"     while messages:         message = messages.pop(0)         print(message)         sent_messages.append(message)  messages = [     \"Hello, what's up?\",     \"Remember the test.\",     \"Don't forget about tomorrow.\",     \"Have a great day!\" ]  sent_messages = []  send_messages(messages, sent_messages)  print(\"\\nOriginal Messages:\") for message in messages:     print(message)  print(\"\\nSent Messages:\") for message in sent_messages:     print(message) <pre>Hello, what's up?\nRemember the test.\nDon't forget about tomorrow.\nHave a great day!\n\nOriginal Messages:\n\nSent Messages:\nHello, what's up?\nRemember the test.\nDon't forget about tomorrow.\nHave a great day!\n</pre> In\u00a0[21]: Copied! <pre>print(\"Reading the entire file:\")\nwith open(\"learning_python.txt\", \"r\") as file:\n    contents = file.read()\n    print(contents)\n\nprint(\"\\nLooping over the file object:\")\nwith open(\"learning_python.txt\", \"r\") as file:\n    for line in file:\n        print(line.rstrip())\n\nprint(\"\\nStoring lines in a list then working with them:\")\nwith open(\"learning_python.txt\", \"r\") as file:\n    lines = file.readlines()\n    for line in lines:\n        print(line.rstrip())\n</pre> print(\"Reading the entire file:\") with open(\"learning_python.txt\", \"r\") as file:     contents = file.read()     print(contents)  print(\"\\nLooping over the file object:\") with open(\"learning_python.txt\", \"r\") as file:     for line in file:         print(line.rstrip())  print(\"\\nStoring lines in a list then working with them:\") with open(\"learning_python.txt\", \"r\") as file:     lines = file.readlines()     for line in lines:         print(line.rstrip())  <pre>Reading the entire file:\nIn Python you can:\n- Define functions and run tasks.\n- Use commands.\n- Work editing websites and applications.\n\n\nLooping over the file object:\nIn Python you can:\n- Define functions and run tasks.\n- Use commands.\n- Work editing websites and applications.\n\nStoring lines in a list then working with them:\nIn Python you can:\n- Define functions and run tasks.\n- Use commands.\n- Work editing websites and applications.\n</pre> In\u00a0[22]: Copied! <pre>with open(\"learning_python.txt\", \"r\") as file:\n    for line in file:\n        modified_line = line.replace('Python', 'C')\n        print(modified_line.rstrip())\n</pre> with open(\"learning_python.txt\", \"r\") as file:     for line in file:         modified_line = line.replace('Python', 'C')         print(modified_line.rstrip())  <pre>In C you can:\n- Define functions and run tasks.\n- Use commands.\n- Work editing websites and applications.\n</pre> In\u00a0[23]: Copied! <pre>name_prompt = input(\"Please enter your name: \")\nwith open(\"guest.txt\", \"w\") as file:\n    file.write(name_prompt)\n    print(\"Your name has been written to guest.txt.\")\n</pre> name_prompt = input(\"Please enter your name: \") with open(\"guest.txt\", \"w\") as file:     file.write(name_prompt)     print(\"Your name has been written to guest.txt.\")  <pre>Your name has been written to guest.txt.\n</pre> In\u00a0[24]: Copied! <pre>guests = []\nwith open(\"guest_book.txt\", \"a\") as file:\n    while True:\n        name = input(\"Please enter your name (enter 'q' to quit): \")\n        \n        if name.lower() == 'q':\n            break\n        \n        print(f\"Welcome, {name}!\")\n        guests.append(name)\n        \n        file.write(name + '\\n')\n\nprint(\"Welcome! Your name has been recorded in guest_book.txt.\")\n</pre> guests = [] with open(\"guest_book.txt\", \"a\") as file:     while True:         name = input(\"Please enter your name (enter 'q' to quit): \")                  if name.lower() == 'q':             break                  print(f\"Welcome, {name}!\")         guests.append(name)                  file.write(name + '\\n')  print(\"Welcome! Your name has been recorded in guest_book.txt.\")  <pre>Welcome! Your name has been recorded in guest_book.txt.\n</pre> In\u00a0[25]: Copied! <pre>with open(\"programming_reasons.txt\", \"a\") as file:\n    while True:\n        reason = input(\"Why do you like programming? (Enter 'q' to quit): \")\n        if reason.lower() == 'q':\n            break\n        file.write(reason + '\\n')\n\nprint(\"Thank you for sharing your reasons! Your responses have been recorded in programming_likes.txt.\")\n</pre> with open(\"programming_reasons.txt\", \"a\") as file:     while True:         reason = input(\"Why do you like programming? (Enter 'q' to quit): \")         if reason.lower() == 'q':             break         file.write(reason + '\\n')  print(\"Thank you for sharing your reasons! Your responses have been recorded in programming_likes.txt.\")  <pre>Thank you for sharing your reasons! Your responses have been recorded in programming_likes.txt.\n</pre> In\u00a0[26]: Copied! <pre>try:\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n    result = num1 + num2\n    print(f\"The sum of {num1} and {num2} is {result}.\")\n    \nexcept ValueError:\n    print(\"Error: Please enter valid numerical inputs.\")\n</pre> try:     num1 = float(input(\"Enter the first number: \"))     num2 = float(input(\"Enter the second number: \"))     result = num1 + num2     print(f\"The sum of {num1} and {num2} is {result}.\")      except ValueError:     print(\"Error: Please enter valid numerical inputs.\") <pre>The sum of 5.0 and 6.0 is 11.0.\n</pre> In\u00a0[33]: Copied! <pre>while True:\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        \n        num2 = float(input(\"Enter second number: \"))\n        \n        result = num1 + num2\n        \n        print(f\"The sum of {num1} and {num2} is {result}.\")\n        \n    except ValueError:\n        print(\"Error: Please enter valid number.\")\n        \n    response = input(\"Do you want to continue? (y/n): \")\n    \n    if response.lower() != 'y':\n        break\n</pre> while True:     try:         num1 = float(input(\"Enter first number: \"))                  num2 = float(input(\"Enter second number: \"))                  result = num1 + num2                  print(f\"The sum of {num1} and {num2} is {result}.\")              except ValueError:         print(\"Error: Please enter valid number.\")              response = input(\"Do you want to continue? (y/n): \")          if response.lower() != 'y':         break <pre>Error: Please enter valid number.\n</pre> In\u00a0[28]: Copied! <pre>try:\n    with open('cats.txt', 'r') as cats_file:\n        print(\"Contents of Cats.txt:\")\n        print(cats_file.read())\n        \n    with open('dogs.txt', 'r') as dogs_file:\n        print(\"\\nContents of Dogs.txt:\")\n        print(dogs_file.read())\n\nexcept FileNotFoundError:\n    print(\"File or files is missing.\")\n</pre> try:     with open('cats.txt', 'r') as cats_file:         print(\"Contents of Cats.txt:\")         print(cats_file.read())              with open('dogs.txt', 'r') as dogs_file:         print(\"\\nContents of Dogs.txt:\")         print(dogs_file.read())  except FileNotFoundError:     print(\"File or files is missing.\")  <pre>Contents of Cats.txt:\nScooter\nPepper\nBee\n\nContents of Dogs.txt:\nPip\nSpot\nBuddy\n</pre> In\u00a0[29]: Copied! <pre>try:\n    with open('Cats.txt', 'r') as cats_file:\n        print(\"Contents of cats.txt:\")\n        print(cats_file.read())\n        \n    with open('Dogs.txt', 'r') as dogs_file:\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_file.read())\nexcept FileNotFoundError:\n    pass\n</pre> try:     with open('Cats.txt', 'r') as cats_file:         print(\"Contents of cats.txt:\")         print(cats_file.read())              with open('Dogs.txt', 'r') as dogs_file:         print(\"\\nContents of dogs.txt:\")         print(dogs_file.read()) except FileNotFoundError:     pass <pre>Contents of cats.txt:\nScooter\nPepper\nBee\n\nContents of dogs.txt:\nPip\nSpot\nBuddy\n</pre> In\u00a0[30]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[30]: <pre>2</pre> In\u00a0[31]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[31]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[32]: Copied! <pre>def count_word(word, file_path):\n    count = 0\n    with open(file_path, 'r') as file:\n        for line in file:\n            count += line.lower().count(word.lower())\n    return count\n\nfile_path = \"A Tale Of Two Cities.txt\"\n\nwhile True:\n    search_term = input(\"Enter a word or phrase to search for (enter 'q' to exit): \")\n    if search_term.lower() == 'q':\n        break\n    else:\n        occurrences = count_word(search_term, file_path)\n        print(\"'{}' appears {} times in the file.\".format(search_term, occurrences))\n</pre> def count_word(word, file_path):     count = 0     with open(file_path, 'r') as file:         for line in file:             count += line.lower().count(word.lower())     return count  file_path = \"A Tale Of Two Cities.txt\"  while True:     search_term = input(\"Enter a word or phrase to search for (enter 'q' to exit): \")     if search_term.lower() == 'q':         break     else:         occurrences = count_word(search_term, file_path)         print(\"'{}' appears {} times in the file.\".format(search_term, occurrences))  <pre>'the ' appears 7372 times in the file.\n'the' appears 11484 times in the file.\n'then' appears 268 times in the file.\n'there' appears 627 times in the file.\n</pre>"},{"location":"examples/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"examples/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"examples/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"examples/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"examples/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"examples/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"examples/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"examples/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"examples/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"examples/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"examples/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"examples/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"examples/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"examples/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"examples/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"examples/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"examples/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"examples/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"examples/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"examples/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"examples/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"examples/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"examples/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"examples/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"examples/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"examples/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"examples/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"examples/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"examples/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"examples/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"examples/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"}]}